// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

model User {
  id Int @id @default(autoincrement())
  googleId String? @unique
  name String
  email String @unique
  image String?
  // 사용자가 가입한 커뮤니티 목록 many-to-many
  communities Community[] @relation("UserCommunities")
  // 사용자 커뮤니티 역할 목록 one-to-many
  communityRoles UserCommunityRole[]
  posts Post[]

  password String?

  votes Vote[]
  comments Comment[]

  refreshToken String?
}

model Community {
  id Int @id @default(autoincrement())
  creatorId Int
  name String
  description String
  slug String @unique
  members User[] @relation("UserCommunities")
  moderators Int[]
  // 커뮤니티 사용자 역할 목록 one-to-many
  communityRoles UserCommunityRole[]
  // 커뮤니티에 속한 게시물 목록 one-to-many
  posts Post[]
  // 커뮤니티에 속한 규칙 목록 one-to-many
  rules CommunityRule[]
  createdAt DateTime @default(now())
}

model CommunityRule {
  id Int @id @default(autoincrement())
  // onDelete: Cascade 커뮤니티가 삭제될 경우 규칙도 삭제된다.
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  title String
  description String
}

model UserCommunityRole {
  id Int @id @default(autoincrement())
  // 사용자 (userId 필드를 사용해 User 모델 참조)
  user User @relation(fields: [userId], references: [id])
  userId Int
  // 커뮤니티 (communityId 필드를 사용해 Community 모델 참조)
  community Community @relation(fields: [communityId], references: [id])
  communityId Int
  // 역할 (roleId 필드를 사용해 Role 모델 참조)
  role Role @relation(fields: [roleId], references: [id])
  roleId Int
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique// 역할 이름 (예: 'admin', 'moderator', 'member')
  permissions String[] // 역할에 부여된 권한 (예: ['post.create', 'post.delete'])
  userCommunityRoles UserCommunityRole[] // 역할이 할당된 커뮤니티 사용자 역할 목록
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String
  // 게시물을 작성한 사용자 User 모델과 One to Many
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  // 게시물이 속한 커뮤니티 Community 모델과 One to Many
  community Community @relation(fields: [communityId], references: [id])
  communityId Int

  votes Vote[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id Int @id @default(autoincrement())

  // 투표를 한 사용자 User 모델과 One to Many
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  // 좋아요 1, 싫어요 -1
  value Int

  createdAt DateTime @default(now())

  @@unique([userId, postId]) // 게시물 당 한번 투표할 수 있도록 제약
  @@index([postId]) // postid 기준 검색 자주 발생하므로 인덱스 추가
  @@index([userId]) // userid 기준 검색 자주 발생하므로 인덱스 추가
}

model Comment {
  id Int @id @default(autoincrement())
  comment String

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  parentCommentId Int?
  parentComment Comment? @relation("NestedComments", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("NestedComments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
}